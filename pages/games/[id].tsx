import type { Game, Word, Tile } from 'types/global'
import Head from 'next/head'
import { GetServerSideProps } from 'next'
import { useState } from 'react'
import { useKeyDown } from 'hooks/useKeyDown'

import TileComponent from 'components/game/tile'
import Language from 'scripts/language'

type Props = {
  game: Game,
  wordList: String[],
  wordToday: Word,
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const id: string = context.query['id'] as string
  const reses = await Promise.all([
    fetch(`http://api:3000/api/v1/games/${id}`),
    fetch(`http://api:3000/api/v1/games/${id}/word_list`),
    fetch(`http://api:3000/api/v1/words/today/${id}`),
  ])
  if (reses[0].status == 200 && reses[1].status == 200 && reses[2].status == 200) {
    const jsons = await Promise.all([reses[0].json(), reses[1].json(), reses[2].json()])
    if (jsons[0].ok && jsons[1].ok && jsons[2].ok) {
      return { props: { game: jsons[0].data, wordList: jsons[1].data, wordToday: jsons[2].data } }
    }
  }
  return { notFound: true }
}

const Games = (props: Props) => {
  const [tilesList, setTilesList] = useState<Tile[][]>([])
  const [currentWord, setCurrentWord] = useState<string[]>([])
  const wordToday: string[] = props.wordToday.name.toUpperCase().split('')
  const language = new Language(props.game.lang)

  useKeyDown((event) => handleInputKey(event.key))

  function getEnterdTiles(word: string[]): Tile[] {
    return word.map((letter, i) => {
      const tile: Tile = { letter: letter.toUpperCase(), isCorrect: false, isPresent: false, isAbsent: false }
      if (wordToday.indexOf(tile.letter) >= 0) {
        if (wordToday.indexOf(tile.letter) == i) {
          tile.isCorrect = true
        } else {
          tile.isPresent = true
        }
      } else {
        tile.isAbsent = true
      }
      return tile
    })
  }

  function handleInputKey(key: string): void{
    if (key == 'Enter') {
      // Press Enter
      setCurrentWord(prevCurrentWord => {
        if (prevCurrentWord.length == props.game.char_count) {
          setTilesList(prevTilesList => {
            if (props.game.challenge_count > prevTilesList.length) {
              // When blank row exists
              return [...prevTilesList, getEnterdTiles(prevCurrentWord)]
            } else {
              // When blank row doesn't exist
              return prevTilesList
            }
          })
          return []
        } else {
          return prevCurrentWord
        }
      })
    } else if (key == 'Backspace') {
      // Press Backspace
      setCurrentWord(prevCurrentWord => {
        return prevCurrentWord.slice(0, prevCurrentWord.length - 1)
      })
    } else if (language.regexp?.test(key) && key.length == 1 && currentWord.length < props.game.char_count) {
      // Press valid key
      setCurrentWord(prevCurrentWord => {
        if (prevCurrentWord.length < props.game.char_count) {
          return prevCurrentWord.concat(key.toUpperCase())
        } else {
          return prevCurrentWord
        }
      })
    }
  }

  const wordsComponent = (
    <div className='words'>
      {(() => {
        // Set rows
        const rowComponents: JSX.Element[] = []
        for (let i = 0; i < props.game.challenge_count; i++){
          // Set tiles
          const tileComponents: JSX.Element[] = []
          for (let j = 0; j < props.game.char_count; j++){
            let tile: Tile = { letter: '', isCorrect: false, isPresent: false, isAbsent: false }
            // When the row already exists
            if (tilesList[i] && tilesList[i][j]) tile = tilesList[i][j]
            // When the row is located bellow the last low
            if (tilesList.length == i && currentWord[j]) tile.letter = currentWord[j]
            tileComponents.push(<TileComponent key={`${i}-${j}`} tile={tile} />)
          }
          rowComponents.push(<div key={i} className='words-row'>{tileComponents}</div>)
        }
        return rowComponents
      })()}
    </div>
  )

  return (
    <main id='main'>
      <Head>
        <title>{ props.game?.title} | WORDLE MAKER APP</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className='container'>
        <div className='games'>
          {wordsComponent}
        </div>
        <h1 className='title'>{props.game?.title}</h1>
        <p>{props.wordToday.name}</p>
      </div>
    </main>
  )
}

export default Games
